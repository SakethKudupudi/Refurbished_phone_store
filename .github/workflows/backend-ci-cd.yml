name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

env:
  JAVA_VERSION: '21'
  MAVEN_VERSION: '3.9.x'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build with Maven
      working-directory: ./backend
      run: mvn clean install -DskipTests
    
    - name: Run tests
      working-directory: ./backend
      run: mvn test
    
    - name: Generate code coverage report
      working-directory: ./backend
      run: mvn verify
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage
    
    - name: Build Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      working-directory: ./backend
      run: |
        docker build -t mobile-parts-backend:${{ github.sha }} .
        docker tag mobile-parts-backend:${{ github.sha }} mobile-parts-backend:latest
    
    - name: Upload artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: backend/target/*.jar
  
  deploy-to-azure:
    name: Deploy to Azure Spring Apps
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: ./backend/target
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Spring Apps
      uses: azure/spring-apps-deploy@v1
      with:
        azure-subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        action: deploy
        service-name: mobile-parts-spring-app
        app-name: mobile-parts-backend
        package: ./backend/target/*.jar
        runtime-version: Java_21
        jvm-options: '-Xms2048m -Xmx2048m'
        environment-variables: |
          SPRING_PROFILES_ACTIVE=production
          AZURE_POSTGRESQL_URL=${{ secrets.AZURE_POSTGRESQL_URL }}
          AZURE_POSTGRESQL_USERNAME=${{ secrets.AZURE_POSTGRESQL_USERNAME }}
          AZURE_POSTGRESQL_PASSWORD=${{ secrets.AZURE_POSTGRESQL_PASSWORD }}
          AZURE_AD_TENANT_ID=${{ secrets.AZURE_AD_TENANT_ID }}
          AZURE_AD_CLIENT_ID=${{ secrets.AZURE_AD_CLIENT_ID }}
          AZURE_AD_CLIENT_SECRET=${{ secrets.AZURE_AD_CLIENT_SECRET }}
          AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
          AZURE_KEYVAULT_URI=${{ secrets.AZURE_KEYVAULT_URI }}
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
    
    - name: Run database migrations
      run: |
        az postgres flexible-server execute \
          --name mobile-parts-db \
          --admin-user ${{ secrets.DB_ADMIN_USER }} \
          --admin-password ${{ secrets.DB_ADMIN_PASSWORD }} \
          --database-name mobileparts \
          --file-path backend/src/main/resources/db/migration/*.sql
